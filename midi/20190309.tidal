-- configure

(midicmd, midicmd_p) = pS "midicmd" (Nothing)
(midichan, midichan_p) = pF "midichan" (Nothing)
(progNum, progNum_p) = pF "progNum" (Nothing)
(val, val_p) = pF "val" (Nothing)
(uid, uid_p) = pF "uid" (Nothing)
(array, array_p) = pS "array" (Nothing)
(frames, frames_p) = pF "frames" (Nothing)
(seconds, seconds_p) = pF "seconds" (Nothing)
(minutes, minutes_p) = pF "minutes" (Nothing)
(hours, hours_p) = pF "hours" (Nothing)
(frameRate, frameRate_p) = pF "frameRate" (Nothing)
(songPtr, songPtr_p) = pF "songPtr" (Nothing)
(ctlNum, ctlNum_p) = pF "ctlNum" (Nothing)
(control, control_p) = pF "control" (Nothing)
(amp, amp_p) = pF "amp" (Nothing)
(sysex1, sysex1_p) = pF "sysex1" (Nothing)
(sysex2, sysex2_p) = pF "sysex2" (Nothing)
(sysex3, sysex3_p) = pF "sysex3" (Nothing)
(sysex4, sysex4_p) = pF "sysex4" (Nothing)
(sysex5, sysex5_p) = pF "sysex5" (Nothing)
(sysex6, sysex6_p) = pF "sysex6" (Nothing)
(sysex7, sysex7_p) = pF "sysex7" (Nothing)
(sysex8, sysex8_p) = pF "sysex8" (Nothing)
(sysex9, sysex9_p) = pF "sysex9" (Nothing)
(sysex10, sysex10_p) = pF "sysex10" (Nothing)

cc ch v = ccn ch # ccv v
mpan = cc 10
rparam1 = cc 16
rparam2 = cc 17
rparam3 = cc 18
rparam4 = cc 19
rparam5 = cc 20
rparam6 = cc 21
rparam7 = cc 22
rparam8 = cc 23
rfatk = cc 70
rfdcy = cc 71
rfsus = cc 72
rfrel = cc 73
rffreq = cc 74
rfq = cc 75
rfmode = cc 76
rfdepth = cc 77
ratk = cc 78
rhld = cc 79
rdcy = cc 80
rdrive = cc 81
rdel = cc 82
rrev = cc 83
rlfofreq = cc 102
rlfopow = cc 103
rlfoio = cc 104
rlfodest = cc 105
rlfostrart = cc 106
rlfomode = cc 107
rlfodepth = cc 108
fsysex v5 v6 v7 v8 v9 = midicmd "sysex"
  # sysex1 0xf0
  # sysex2 0x43
  # sysex3 0x10
  # sysex4 0x5e
  # sysex5 v5
  # sysex6 v6
  # sysex7 v7
  # sysex8 v8
  # sysex9 v9
  # sysex10 0xf7
fvoiced ch op c v1 v2 = fsysex (0x60 + ch) op c v1 v2
fosccoarse ch op v = fvoiced ch op 0x01 0x00 v
foscfine ch op v = fvoiced ch op 0x02 0x00 v
foscatk ch op v = fvoiced ch op 0x0a 0x00 v
foscdcy ch op v = fvoiced ch op 0x0b 0x00 v
foscenvlevel1 ch op v = fvoiced ch op 0x0c 0x00 v
foscenvlevel2 ch op v = fvoiced ch op 0x0d 0x00 v
foscenvlevel3 ch op v = fvoiced ch op 0x0e 0x00 v
foscenvlevel4 ch op v = fvoiced ch op 0x0f 0x00 v
foscenvtime1 ch op v = fvoiced ch op 0x10 0x00 v
foscenvtime2 ch op v = fvoiced ch op 0x11 0x00 v
foscenvtime3 ch op v = fvoiced ch op 0x12 0x00 v
foscenvtime4 ch op v = fvoiced ch op 0x13 0x00 v
foscenvscale ch op v = fvoiced ch op 0x15 0x00 v


rytm ch = midichan ch |+| note (-24) # amp 1 # s "rytm"
fs1r ch = midichan ch # amp 1 # s "fs1r"
nord ch = midichan ch # amp 1 # s "nord"
rnote p1 o = note (choose p1) |+| note (choose (map (* 12) o))
rsus min max = sustain (scale min max rand)
susr xs = sustain (choose xs)
fastr p xs = spreadr fast (map (* p) xs)
zoomr p xs = spreadr ($) [zoom (0, x) | x <- xs]
rotr p xs = spreadr (~>) xs
chunkr xs f = spreadr ($) [chunk x (f) | x <- xs]
nordvar ch v = nord ch # cc 70 (127/8*v)
rscene v = rytm 16 # cc 92 v
degr xs = spreadr (degradeBy) xs
ss x s e = sometimesBy x (within (s, e) (spreadr ($) [(stut 6 0.7 0.125), (stut 4 0.7 0.25)]))
ssA x = ss x 0 0.5
ssB x = ss x 0.5 1
rr xs = foldEvery xs (spreadr (<~) [0.125, 0.25, 0.5, 0.75])
zz xs = foldEvery xs (zoom (0, 0.5))
stutS n d = stut n 1 d

ss x s e = sometimesBy x (within (s, e) (spreadr ($) [(stutS 3 0.25), (stutS 4 0.25)]))
ssA x = ss x 0 0.5
ssB x = ss x 0.5 1
br r f = spreadr f [ x * r | x <- [1,2,3,4,5,6,7,8]] . sometimes (zoom (0,0.5))
brF r = br r fast
brS r =  br r slow
db = degradeBy


lsysP x n r s = p $ "{" ++ pat ++ "}%" ++ (show x)
  where ds = ["~", "1"] ++ map (\x -> "1/" ++ (show x)) [2..16]
        lsys = take 128 $ lindenmayer n r s
        pat = intercalate " " (map (\x -> ds !! (Char.digitToInt x)) lsys)

lsysN x n r s ns = p $ "{" ++ pat ++ "}%" ++ (show x)
  where lsys = lindenmayer n r s
        l = length ns
        note x
          | Char.isHexDigit x == True = show (ns !! (mod (Char.digitToInt x) l))
          | otherwise = "~"
        pat = intercalate " " (map (\x -> note x) lsys)

lsysO x n r s = p $ "{" ++ pat ++ "}%" ++ (show x)
  where lsys = lindenmayer n r s
        oct x
          | Char.isHexDigit x == True = show $ (Char.digitToInt x) * 12
          | otherwise = "~"
        pat = intercalate " " (map (\x -> oct x) lsys)



--- patterns

cps(-1)

hush

do
  d1 $ fastr 1 [1,2,3,4] $ nord (randcat ["7(5,8)", "7(6,8)", "7(7,8)"]) # rnote [-1,0,3,6] [-4, -3,-2] # rsus 0.1 0.8


do
  -- cps (68/120)
  d2 $
    ssA 0.8 $
    degr [0.2, 0.1] $
    fastr 0.25 [1,1.5,2] $
    slow 2 $
    stack [
    rotr 0.9 [0,0.25,0.5] $ degr [0.2,0.8] $ rytm "0(11,16)"
    , slow 1 $ rytm "3(9, 16, 12)"
    , rytm "8(15,16)"
    , rytm "9(3,16)"
    , rytm "11"
    , nord "3(16,16)?" # rnote [0..12] [-3..3] # rsus 0.2 0.8
    , nordvar 3 1
    , nord "8*5?" # rnote [0] [0..3] # susr [0.1..0.5]
    ]

hush

do
  cps(60/120)
  d1 $ stack [
    fastr 0.5 [1,2,3] $ rotr 0.5 [0.5] $ nord "0(12,16)" # note "{0,3,7,11,13}" |+| rnote [0,3] [0,1,2] # susr [0.2..2]
    , degr [0.6,0.3] $ fastr 1 [1,2,3] $  rotr 0.5 [0.5] $ nord "0(15,16)" # rnote [0,3,6,11,13] [-1,2,3,4] # susr [0.2..0.8]
    , nordvar 0 4
    ] # nudge (slow 8 $ sine)




hush

do
  cps((127 / 2) / 120)
  hush
  d1 $
    ssA 0.2 $
    -- degradeBy 0.8 $
    -- chunkr [2,3,4,6] (rev) $
    fastr 1 [1,2] $
    -- zoomr 0.1 [0.5,0.25] $
    rotr 0.3 [0.3,0.6] $
    stack [
    ssA 0.8 $ fastr 0.5 [1,2] $ rytm (randcat ["0(3,8)", "0*4", "0(5,8)", "0*6", "1(6,8)", "0(6,8)", "0*3"])
    , rytm "8*8?"
    , rytm "9*3?"
    , ssA 0.1 $ fastr 1 [1,2,3,4,6] $ nord (randcat ["2(5,8)", "2(6,8)", "2(7,8)"]) # rnote [-2,0,3,7] [-3,-3] # susr [0.1,0.3]
    , fastr 0.5 [1,2,3] $ nord "3*16?" # rnote [0..11] [-3..3] # susr [0.1..0.8]
    , fastr 0.25 [1,2,3] $ nord "1*16?" # rnote [0..11] [-3..3] # susr [0.2..0.1]
    , nordvar 3 1
    , nordvar 2 2
    , nordvar 1 1
    , rscene 2
    -- , fast 1 $ nord "8*8?" # rnote [0] [-3..3] # susr [0.5]
    ]



hush


cps(-1)

do
  cps (80/120)
  d1 $
    -- ssB 0.6 $
    -- degradeBy 0.8 $
    -- chunk 2 (rev) $
    -- fastr 0.5 [1,2,3] $
    -- zoomr 0.4 [0.5,0.75] $
    -- rotr 0.8 [0.5,0.25,0.3] $
    -- degradeBy 0 $
    stack [
    rytm "0 ~ ~ ~ 0 ~ ~ ~ 3 0 ~ ~ ~ ~ 0 ~"
    , rytm "8(14,16)"
    , rytm "9(3,16)"
    , rotr 0.5 [0.5,0.75,0.25] $ nord (randcat ["2(9, 16)", "2(6, 16)"])
      # rnote [0,3,6] [-3] # susr [0.3..1]
    , nordvar 2 1
    , nord "1(13,16)" # rnote [0,3,6,11] [-3..4] # rsus 0.1 0.9
    , nord "3(15,16)" # rnote [0] [-4..(-2)] # rsus 0.1 0.2
    , nordvar 3 2
    , nordvar 1 2
    , rscene 2
    , fast 0.4 $ nord "8?" # rnote [0] [0..3] # susr [0.5]
    ]


hush

do
  hush
  cps(160/120)
  d1 $
    ssA 0.4 $
    -- degradeBy 0.4 $
    fastr 1 [1,2,3] $
    zoomr 0.3 [0.75, 1, 0.5, 0.25] $
    stack [
    -- ssA 0.4 $ degradeBy 0.2 $ rytm (randcat ["0*4", "0*2", "0*5", "0*3", "3", "3*2", "3*3", "4*2"])
    -- , rytm $ randcat ["8*8", "8*10", "11*6"]
    -- , fastr 1 [1,3] $ nord (randcat ["2", "2*3", "2*2", "2*4","2*6"]) # rnote [-1,0,3] [-3,-2] # rsus 0.2 0.7
    -- , nord "1*8?" # rnote [0,3,6] [-3..3] # rsus 0.3 3
    -- , fastr 0.25 [1,2,3,4,5] $ (2 <~) $ nord "3*8?" # rnote [0] [-4..4] # rsus 0.2 0.4
    -- , nord "7*8?" # rnote [0,3,7,11] [3] # rsus 0.1 0.2
    nord "0/3" # note "{0,11,18,32,49}" |+| rnote [0,3,7] [-3] # susr [20]
    , nordvar 0 3
    , nordvar 1 1
    , nordvar 2 2
    , nordvar 3 1
    , rscene 2
    -- , fast 1 $ nord "8?" # rnote [0] [-3] # susr [0.1]
    ]


do
  hush
  cps(127/120)
  d1 $
    degradeBy 0.8 $
    fastr 0.2 [0.125,0.25,0.5,1,1.5] $
    -- zz [4,11] $
    stack [
    slow 2 $ degradeBy 0 $ rr [3,8] $ rytm "0(3,8)"
    , ssA 0.7 $ randcat [rytm "8*4", rytm "8*3"]
    , nord "2*3?" # rnote [-2,0,3] [-3] # rsus 8 16
    , nordvar 2 1
    , nord "3*8?" # rnote [0,3,6] [-2..0] # rsus 0.1 0.2
    , nordvar 3 2
    , nord "0*4" # note "{0,6,11,13}" |+| rnote [0] [-3] # rsus 20 30 # amp 0.9
    , nordvar 0 8
    , rscene 2
    , fast 0.2 $ nord "8?" # rnote [0] [-4..5] # susr [0.5]
    ] -- # nudge (slow 11 $ scale 0 0.5 rand)


hush


do
  hush
  cps(90/120)
  d1 $
    -- ssA 0.9 $
    -- degradeBy 0.8 $
    fastr 0.01 [1,2,3,4,5] $
    -- brS 2 $
    spreadr ($) [e 11 16, e 8 11,e 7 13, e 6 11, e 3 13] $
    stack [ rytm "0"
          , rytm "9"
          , nord "0"
            # note "{0,3,7,11,13}" |+| rnote [0,3,6] [-3]
            # rsus 10 15
            # amp 1
          , nordvar 0 3
          , nord "2"
            # rnote [0,3] [-3]
            # rsus 1 2
          , nordvar 2 2
          , nord "1"
            # rnote [0] [-2,-1,0]
            # rsus 0.1 0.3
          , nord "3"
            # rnote [0] [-2..3]
            # rsus 0.1 0.3
          , nordvar 3 1
          , rscene 0
          ]




do
  cps(95/120)
  hush
  d1 $
    ssA 0.5 $
    -- spreadr fast (map (* 0.25) [1,2,3,4,5,6,7,8]) $
    zz [5,6,7,8] $
    -- rr [3,7] $
    -- fast 1.25 $ zoom (0, 0.75) $
    stack [
    rarely (rev) $ rytm "[0 ~ 1 0 ~ 0 [3 0] ~, 8*12?, 9]" # amp 1
    , rytm "10*4"
    -- , rr [3,5] $ fs1r "2(7,8)" # note "{0,3,7,11,13}" |+| rnote [0,3] [0,1,2,3] # rsus 0.1 4
    , zz [4,9] $ rr [3,10] $ nord "2(6,8)" # rnote [0,3,6] [-3] # rsus 0.1 0.8
    ]


hush


do
  hush
  cps(140/120)
  d1 $
    ssA 0.2 $
    -- brF 0.1 $
    -- slow 3 $
    -- zz [4,7] $
    stack [ randcat [rytm x | x <- ["0*4", "0*3", "0*2 [0*3]"]]
          , randcat [rytm x | x <- ["4/2", "4/3", "4/4"]]
          , randcat [rytm x | x <- ["8*4", "8*6"]]
          , randcat [rytm x | x <- ["9", "9*2", "9*3"]]
          , randcat [rytm x | x <- ["3*3", "3*2"]]
          , randcat [fs1r x | x <- ["3*3", "3*4", "3*6"]]
            # note "{0,3,6,11,13}" |+| rnote [0,3,6,9] [0..3] # rsus 0.1 0.2
          , randcat [nord x | x <- ["2*16?"]]
           # rnote [0,3,6,9] [-3] # rsus 0.1 0.7
          , randcat [fs1r x | x <- ["2*2", "2*3", "2*4"]]
            # note "{0,3,6,11}" |+| rnote [0..12] [-2..4] # rsus 0.3 0.8
          ]

hush


do
  hush
  cps(90/120)
  d1 $
    ssA 0.6 $
    spreadr slow [2,1,3,0.8] $
    -- degradeBy 0.3 $
    -- fastr 0.25 [1,2,3,4,5,6] $
    zz [6] $
    slow 4 $
    stack [
        nord "3(10,16)" # rnote [0,3,7,10] [-4] # rsus 0.01 0.02
        , sometimes rev $ nord "1(11,16)" # note "{0,3,6,11,13}" |+| rnote [0] [0,1,2] # rsus 0.1 0.2
        , rr [3,2] $ fs1r "2(13,16)" # note "{0,3,6,11,13}" |+| note "{0 3 6 2 -1}/12" |+| rnote [0] [3] # rsus 0.05 0.1
        , nord "2(11,16)?" # rnote [0,5] [-3] # rsus 0.1 0.2
        , rr [2,5] $ rytm "0(16,16)"
        , rytm "3/2"
        , rytm "8*16?"
        , rytm "11*4"
    ] -- # nudge (slow 12 $ scale 0 1 sine)


hush


-----


hush

d1 $ fs1r "2" # note "{0,4,7,11}" |+| note 12 # rsus 0.1 0.2

d1 $ randcat [fs1r "2(9,16)", fs1r "3(9,16)"] # note "{0,3,7,11,13,17}" |+| rnote [0,3,6] [-2,-1,0,1,2,3] # rsus 0.1 0.2

do
  hush
  cps(90/120)
  d1 $
    ssA 0.2 $
    -- spreadr fast (map (* 1) [1,2,3]) $
    -- degradeBy 0.8 $
    rr [3,5] $
    zz [9,15] $
    stack [
    rytm "[0 ~ ~ 0 1 ~ 0 3,8*16?, 9*3]"
    , rr [2] $ fs1r "2(14,16)" # note "{0,3,11,14}" |+| rnote [0] [0] # rsus 0.05 0.2
    , fast 16 $ n "128" # mpan (choose [64]) # fs1r 2
    , rr [2,5] $ nord "2(6,16)" # rnote [0,3,7,11,13] [-3] # rsus 0.3 0.7
    ]

hush

do
  cps(90/120)
  hush
  d1 $
    ssA 0.7 $
    ssA 0.6 $
    spreadr fast (map (* 0.5) [3,4,5,6,7,8,9,10,11,12]) $
    degradeBy 0.3 $
    stack [
    ssA 0.4 $ spreadr fast (map (* 3) [1,2,3,4,5,6,7,8]) $ rytm "{0/3?,1/4?,3/6?,8?,9/8?}" # amp 1
    , fs1r "0/3" # note (choose [0,3,7,11,13]) |+| note (choose [-48,-36,-24,-12,0,12,24]) # sustain (rand * 10) # amp 1
    , nord "2" # note (choose [0,3,7,11,13]) |+| note (choose [-48]) # sustain (rand * 10) # amp 1
    ] # nudge rand

hush


hush

